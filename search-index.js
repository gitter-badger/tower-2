var searchIndex = {};
searchIndex["tower_balance"] = {"doc":"","items":[[3,"Balance","tower_balance","Balances requests across a set of inner services.",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","Error produced by `Balance`",null,null],[13,"Inner","","",0,null],[13,"Balance","","",0,null],[13,"NotReady","","",0,null],[0,"choose","","",null,null],[3,"PowerOfTwoChoices","tower_balance::choose","Chooses nodes using the [Power of Two Choices][p2c].",null,null],[3,"RoundRobin","","Chooses nodes sequentially.",null,null],[3,"TooFew","","Indicates that there were not at least two services.",null,null],[3,"Replicas","","Holds two or more services.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"new","","",1,{"i":[{"n":"smallrng"}],"o":{"n":"self"}}],[11,"choose","","Chooses two distinct nodes at random and compares their load.",1,{"i":[{"n":"self"},{"n":"replicas"}],"o":{"n":"usize"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",2,{"o":{"n":"roundrobin"}}],[11,"choose","","",2,{"i":[{"n":"self"},{"n":"replicas"}],"o":{"n":"usize"}}],[8,"Choose","","A strategy for choosing nodes.",null,null],[10,"choose","","Returns the index of a replica to be used next.",3,{"i":[{"n":"self"},{"n":"replicas"}],"o":{"n":"usize"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"toofew"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"index","","",5,null],[0,"load","tower_balance","",null,null],[3,"InstrumentFuture","tower_balance::load","Attaches a `I`-typed instruments to the result of an `F`-typed `Future`.",null,null],[3,"NoInstrument","","A `Instrument` implementation that drops each instrument immediately.",null,null],[3,"Constant","","Wraps a type so that `Load::load` returns a constant value.",null,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"noinstrument"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",7,{"i":[{"n":"i"},{"n":"h"},{"n":"f"}],"o":{"n":"self"}}],[11,"poll","","",7,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"instrument","","",6,{"i":[{"n":"self"},{"n":"h"},{"n":"v"}],"o":{"n":"v"}}],[11,"new","","",8,{"i":[{"n":"t"},{"n":"m"}],"o":{"n":"self"}}],[11,"load","","",8,{"i":[{"n":"self"}],"o":{"n":"m"}}],[11,"poll_ready","","",8,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",8,null],[11,"poll","","Yields the next discovery change set.",8,{"i":[{"n":"self"}],"o":{"g":["change"],"n":"poll"}}],[0,"peak_ewma","","",null,null],[3,"PeakEwma","tower_balance::load::peak_ewma","Wraps an `S`-typed Service with Peak-EWMA load measurement.",null,null],[3,"WithPeakEwma","","Wraps a `D`-typed stream of discovery updates with `PeakEwma`.",null,null],[3,"Cost","","Represents the relative cost of communicating with a service.",null,null],[3,"Handle","","Updates `RttEstimate` when dropped.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"cost"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"cost"}],"o":{"n":"bool"}}],[11,"new","","",10,{"i":[{"n":"d"},{"n":"duration"},{"n":"i"}],"o":{"n":"self"}}],[11,"poll","","",10,{"i":[{"n":"self"}],"o":{"g":["change"],"n":"poll"}}],[11,"poll_ready","","",11,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",11,null],[11,"load","","",11,null],[11,"drop","","",12,{"i":[{"n":"self"}]}],[0,"pending_requests","tower_balance::load","",null,null],[3,"PendingRequests","tower_balance::load::pending_requests","Expresses load based on the number of currently-pending requests.",null,null],[3,"WithPendingRequests","","Wraps `inner`'s services with `PendingRequests`.",null,null],[3,"Count","","Represents the number of currently-pending requests to a given service.",null,null],[3,"Handle","","",null,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"count"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",15,{"o":{"n":"count"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"ordering"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"load","","",13,{"i":[{"n":"self"}],"o":{"n":"count"}}],[11,"poll_ready","","",13,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",13,null],[11,"new","","",14,{"i":[{"n":"d"},{"n":"i"}],"o":{"n":"self"}}],[11,"poll","","Yields the next discovery change set.",14,{"i":[{"n":"self"}],"o":{"g":["change"],"n":"poll"}}],[8,"Instrument","tower_balance::load","Attaches `I`-typed instruments to `V` typed values.",null,null],[16,"Output","","",17,null],[10,"instrument","","Attaches an `H`-typed handle to a `V`-typed value.",17,null],[8,"Load","","Exposes a load metric.",null,null],[16,"Metric","","",18,null],[10,"load","","",18,null],[11,"fmt","tower_balance","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"p2c","","Chooses services using the [Power of Two Choices][p2c].",19,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"p2c_with_rng","","Initializes a P2C load balancer from the provided randomization source.",19,{"i":[{"n":"d"},{"n":"r"}],"o":{"g":["error"],"n":"result"}}],[11,"round_robin","","Attempts to choose services sequentially.",19,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"new","","Creates a new balancer.",19,{"i":[{"n":"d"},{"n":"c"}],"o":{"n":"self"}}],[11,"is_ready","","Returns true iff there are ready services.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_not_ready","","Returns true iff there are no ready services.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"num_ready","","Counts the number of services considered to be ready.",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"num_not_ready","","Counts the number of services not considered to be ready.",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"poll_ready","","Prepares the balancer to process a request.",19,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",19,null],[11,"poll","","",20,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"PowerOfTwoChoices"],[3,"RoundRobin"],[8,"Choose"],[3,"TooFew"],[3,"Replicas"],[3,"NoInstrument"],[3,"InstrumentFuture"],[3,"Constant"],[3,"Cost"],[3,"WithPeakEwma"],[3,"PeakEwma"],[3,"Handle"],[3,"PendingRequests"],[3,"WithPendingRequests"],[3,"Count"],[3,"Handle"],[8,"Instrument"],[8,"Load"],[3,"Balance"],[3,"ResponseFuture"]]};
searchIndex["tower_buffer"] = {"doc":"Buffer requests when the inner service is out of capacity.","items":[[3,"Buffer","tower_buffer","Adds a buffer in front of an inner service.",null,null],[3,"ResponseFuture","","Future eventually completed with the response to the original request.",null,null],[3,"Worker","","Task that handles processing the buffer. This type should not be used directly, instead `Buffer` requires an `Executor` that can accept this task.",null,null],[3,"SpawnError","","Error produced when spawning the worker fails",null,null],[4,"Error","","Errors produced by `Buffer`.",null,null],[13,"Inner","","",0,null],[13,"Closed","","",0,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `Buffer` wrapping `service`.",1,{"i":[{"n":"t"},{"n":"e"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"Buffer"],[3,"SpawnError"],[3,"ResponseFuture"],[3,"Worker"]]};
searchIndex["tower_discover"] = {"doc":"Tower service discovery","items":[[3,"List","tower_discover","Static service discovery based on a predetermined list of services.",null,null],[4,"Change","","A change in the service set",null,null],[13,"Insert","","",0,null],[13,"Remove","","",0,null],[8,"Discover","","Provide a uniform set of services able to satisfy a request.",null,null],[16,"Key","","NewService key",1,null],[16,"Request","","Requests handled by the discovered services",1,null],[16,"Response","","Responses given by the discovered services",1,null],[16,"Error","","Errors produced by the discovered services",1,null],[16,"Service","","The discovered `Service` instance.",1,null],[16,"DiscoverError","","Error produced during discovery",1,null],[10,"poll","","Yields the next discovery change set.",1,{"i":[{"n":"self"}],"o":{"g":["change"],"n":"poll"}}],[11,"new","","",2,{"i":[{"n":"i"}],"o":{"n":"list"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["change"],"n":"poll"}}]],"paths":[[4,"Change"],[8,"Discover"],[3,"List"]]};
searchIndex["tower_filter"] = {"doc":"Conditionally dispatch requests to the inner service based on the result of a predicate.","items":[[3,"Filter","tower_filter","",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","Errors produced by `Filter`",null,null],[13,"Rejected","","The predicate rejected the request.",0,null],[13,"Inner","","The inner service produced an error.",0,null],[13,"NoCapacity","","The service is out of capacity.",0,null],[8,"Predicate","","Checks a request",null,null],[16,"Error","","",1,null],[16,"Future","","",1,null],[10,"check","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",2,{"i":[{"n":"t"},{"n":"u"},{"n":"usize"}],"o":{"n":"self"}}],[11,"poll_ready","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",2,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Error"],[8,"Predicate"],[3,"Filter"],[3,"ResponseFuture"]]};
searchIndex["tower_in_flight_limit"] = {"doc":"Tower middleware that limits the maximum number of in-flight requests for a service.","items":[[3,"InFlightLimit","tower_in_flight_limit","",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","Error returned when the service has reached its limit.",null,null],[13,"NoCapacity","","",0,null],[13,"Upstream","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"inflightlimit"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new rate limiter",1,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"self"}}],[11,"get_ref","","Get a reference to the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consume `self`, returning the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"InFlightLimit"],[3,"ResponseFuture"]]};
searchIndex["tower_mock"] = {"doc":"Mock `Service` that can be used in tests.","items":[[3,"Mock","tower_mock","A mock service",null,null],[3,"Handle","","Handle to the `Mock`.",null,null],[3,"Request","","",null,null],[3,"Respond","","Respond to a request received by `Mock`.",null,null],[3,"ResponseFuture","","Future of the `Mock` response.",null,null],[4,"Error","","Enumeration of errors that can be returned by `Mock`.",null,null],[13,"Closed","","",0,null],[13,"NoCapacity","","",0,null],[13,"Other","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Mock` and `Handle` pair.",1,null],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"poll_request","","Asynchronously gets the next request",2,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"next_request","","Synchronously gets the next request.",2,{"i":[{"n":"self"}],"o":{"g":["request"],"n":"option"}}],[11,"allow","","Allow a certain number of requests",2,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"into_parts","","Split the request and respond handle",3,null],[11,"respond","","",3,{"i":[{"n":"self"},{"n":"u"}]}],[11,"error","","",3,{"i":[{"n":"self"},{"n":"e"}]}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"respond","","",4,{"i":[{"n":"self"},{"n":"t"}]}],[11,"error","","",4,{"i":[{"n":"self"},{"n":"e"}]}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"n":"poll"}}]],"paths":[[4,"Error"],[3,"Mock"],[3,"Handle"],[3,"Request"],[3,"Respond"],[3,"ResponseFuture"]]};
searchIndex["tower_rate_limit"] = {"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"RateLimit","tower_rate_limit","",null,null],[3,"Rate","","",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","The request has been rate limited",null,null],[13,"RateLimit","","",0,null],[13,"Upstream","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rate"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new rate limiter",1,{"i":[{"n":"t"},{"n":"rate"},{"n":"timer"}],"o":{"n":"self"}}],[11,"get_ref","","Get a reference to the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consume `self`, returning the inner service",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new","","Create a new rate",2,{"i":[{"n":"u64"},{"n":"duration"}],"o":{"n":"self"}}],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"RateLimit"],[3,"Rate"],[3,"ResponseFuture"]]};
searchIndex["tower_reconnect"] = {"doc":"","items":[[3,"Reconnect","tower_reconnect","",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","",null,null],[13,"Inner","","",0,null],[13,"Connect","","",0,null],[13,"NotReady","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"Reconnect"],[3,"ResponseFuture"]]};
searchIndex["tower_router"] = {"doc":"Routes requests to one of many inner inner services based on the request.","items":[[3,"Router","tower_router","Routes requests to an inner service based on the request.",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","Error produced by the `Router` service",null,null],[13,"Inner","","Error produced by inner service.",0,null],[13,"Route","","Error produced during route recognition.",0,null],[13,"NotReady","","Request sent when not ready.",0,null],[8,"Recognize","","Matches the request with a route",null,null],[16,"Request","","Request being matched",1,null],[16,"Response","","Inner service's response",1,null],[16,"Error","","Error produced by a failed inner service request",1,null],[16,"RouteError","","Error produced by failed route recognition",1,null],[16,"Service","","The destination service",1,null],[10,"recognize","","Recognize a route",1,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new router",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"poll_ready","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",2,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}]],"paths":[[4,"Error"],[8,"Recognize"],[3,"Router"],[3,"ResponseFuture"]]};
searchIndex["tower_service"] = {"doc":"Definition of the core `Service` trait to Tower","items":[[3,"Ready","tower_service","Future yielding a `Service` once the service is ready to process a request",null,null],[8,"Service","","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",0,null],[16,"Response","","Responses given by the service.",0,null],[16,"Error","","Errors produced by the service.",0,null],[16,"Future","","The future response value.",0,null],[11,"ready","","A future yielding the service when it is ready to accept a request.",0,{"i":[{"n":"self"}],"o":{"n":"ready"}}],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",0,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[10,"call","","Process the request and return the response asynchronously.",0,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",1,null],[16,"Response","","Responses given by the service",1,null],[16,"Error","","Errors produced by the service",1,null],[16,"Service","","The `Service` value created by this factory",1,null],[16,"InitError","","Errors produced while building a service.",1,null],[16,"Future","","The future of the `Service` instance.",1,null],[10,"new_service","","Create and return a new service value asynchronously.",1,null],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}]],"paths":[[8,"Service"],[8,"NewService"],[3,"Ready"]]};
searchIndex["tower_timeout"] = {"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"Timeout","tower_timeout","Applies a timeout to requests.",null,null],[3,"ResponseFuture","","`Timeout` response future",null,null],[4,"Error","","Errors produced by `Timeout`.",null,null],[13,"Inner","","The inner service produced an error",0,null],[13,"Timeout","","The request did not complete within the specified timeout.",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",1,{"i":[{"n":"t"},{"n":"timer"},{"n":"duration"}],"o":{"n":"self"}}],[11,"poll_ready","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",1,null],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[4,"Error"],[3,"Timeout"],[3,"ResponseFuture"]]};
searchIndex["tower_util"] = {"doc":"Various utility types and functions that are generally with Tower.","items":[[3,"NewServiceFn","tower_util","A `NewService` implemented by a closure.",null,null],[0,"either","","Contains `EitherService` and related types and functions.",null,null],[4,"EitherService","tower_util::either","Combine two different service types into a single type.",null,null],[13,"A","","",0,null],[13,"B","","",0,null],[11,"poll_ready","","",0,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",0,null],[0,"option","tower_util","Contains `OptionService` and related types and functions.",null,null],[3,"OptionService","tower_util::option","Optionally forwards requests to an inner service.",null,null],[3,"ResponseFuture","","Response future returned by `OptionService`.",null,null],[4,"Error","","Error produced by `OptionService` responding to a request.",null,null],[13,"Inner","","",1,null],[13,"None","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"some","","Returns an `OptionService` that forwards requests to `inner`.",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"none","","Returns an `OptionService` that responds to all requests with `Error::None`.",2,{"o":{"n":"self"}}],[11,"poll_ready","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",2,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"boxed","tower_util","Trait object `Service` instances",null,null],[3,"BoxService","tower_util::boxed","A boxed `Service + Send` trait object.",null,null],[3,"UnsyncBoxService","","A boxed `Service` trait object.",null,null],[6,"BoxFuture","","A boxed `Future + Send` trait object.",null,null],[6,"UnsyncBoxFuture","","A boxed `Future` trait object.",null,null],[11,"new","","",4,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"poll_ready","","",4,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"boxfuture"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",5,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"poll_ready","","",5,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"unsyncboxfuture"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","tower_util","Returns a new `NewServiceFn` with the given closure.",6,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"new_service","","",6,null]],"paths":[[4,"EitherService"],[4,"Error"],[3,"OptionService"],[3,"ResponseFuture"],[3,"BoxService"],[3,"UnsyncBoxService"],[3,"NewServiceFn"]]};
searchIndex["tower_watch"] = {"doc":"","items":[[3,"WatchService","tower_watch","A Service that re-binds an inner Service each time a Watch is notified.",null,null],[3,"ResponseFuture","","",null,null],[4,"Error","","",null,null],[13,"Inner","","",0,null],[13,"WatchError","","",0,null],[8,"Bind","","Binds new instances of a Service with a borrowed reference to the watched value.",null,null],[16,"Service","","",1,null],[10,"bind","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new WatchService, bound from the initial value of `watch`.",2,{"i":[{"n":"watch"},{"n":"b"}],"o":{"n":"watchservice"}}],[11,"poll_ready","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"call","","",2,null],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}]],"paths":[[4,"Error"],[8,"Bind"],[3,"WatchService"],[3,"ResponseFuture"]]};
initSearch(searchIndex);
